# -*- coding: utf-8 -*-
"""model_real_time_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AnzY9q6rmNroRP0S1SyV0CoPbgw7TO--
"""

from sklearn.preprocessing import MinMaxScaler
import numpy as np
from keras.models import load_model
import numpy as np
import pandas as pd

# Load the model
model = load_model('/content/model.h5')

# Load the new data
unseen_data = pd.read_csv('/content/EURUSD 1-5 dt.csv')

# Prepare the MinMaxScaler
scaler = MinMaxScaler()

# Initialize the window start position
window_start = 0

# While there is enough data remaining for a full window
while window_start + 37 <= len(unseen_data):
    # Select the data in the window
    window_data = unseen_data.iloc[window_start:window_start+37, :]

    # Normalize the data in the window
    normalized_window_data = scaler.fit_transform(window_data.iloc[:, 2:])  # Adjusted to start from the 'OPEN' column

    # Reshape the data to match the input shape of the LSTM
    input_data = np.reshape(normalized_window_data, (1, 37, 5))

    # Use the LSTM to predict whether this is a Wyckoff accumulation pattern
    prediction = model.predict(input_data)

    # If the model predicts this is a Wyckoff accumulation pattern
    if prediction > 0.5:  # You may need to adjust this threshold
        # Print the start and end date and time of the pattern
        print('Wyckoff accumulation pattern detected from', unseen_data.iloc[window_start, 0], unseen_data.iloc[window_start, 1], 'to', unseen_data.iloc[window_start+36, 0], unseen_data.iloc[window_start+36, 1])

    # Move the window one bar to the right
    window_start += 1